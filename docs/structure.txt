// In this file we write a tl;dr (too long; didn't read) of all structs
// and functions we will have to implement
// Eventually we will sort these into their own header files

// 	The primary requirement of these definitions is for easy saving/loading to disk
MAX_BOARD_NAME_LENGTH 30
MAX_CARD_TITLE_LENGTH 40
MAX_CARD_DESCRIPTION_LENGTH 200
MAX_USER_NAME_LENGTH 30
MAX_USER_EMAIL_LENGTH 50

enum Status {
	TODO, WORKING, DONE;
}

typedef struct {
	char* name;
	char* email;
} User;

typedef struct {
	int cardID;	// generate using rand()
	//		(NOTE: will have to verify availability of generated ID)
	
	char* title;
	char* description;
	time_t timestamp;	//	Date when card was created
	Status status;
	char* user;	// Assigned user (store email); board must contain this user
	char** userLog;	// Store emails of all users who worked on this card
} Card;

/* time_t usage example:
#include <time.h>
[...]
	time_t now = time(0);	// stores current time in seconds
	struct tm* tm;	// built-in structure to convert seconds into a datetime structure
	if ((tm = localtime(&now)) == NULL) {
		printf("ERROR: Cannot convert seconds to datetime\n");
	}
	
	// 	Print out datetime structure into an easily readable form
	// 	(we only need this in terminal.c)
	printf("%04d-%02d-%02d %02d:%02d:%02d\n",
		tm->tm_year+1900, tm->tm_mon, tm->tm_mday,
		tm->tm_hour, tm->tm_min, tm->tm_sec);
[...]
*/

typedef struct {
	char* name;
	
	int numberOfCards;
	Card* cards;	//	linked list
	int numberOfUsers;
	char** users;	// 	array of users assigned to this board (only stores emails)
} Board;

struct {
	Board* selectedBoard;	// 	Pointer to currently selected board, null by default
	//	(NOTE: when deleting currently selected board, this should be set to null)

	int numberOfBoards;
	Board* boards;
	int numberOfUsers;
	User* users;
} Instance instance;
//	Only one instance per process


instanceLoad()
	Loads all boards and users from disk
instanceWrite()
	Writes all boards and users to disk

userCreate(userName, userEmail)
userDelete(userEmail)
	Delete user from all boards and cards (except from history)

boardCreate(boardName)
	Each board should have a list of cards sorted by (status>date)
boardModify(boardName)
boardDelete(boardName)
boardList()
	List all boards
boardSelect(boardName)
	Select board
boardAddUser(boardName, userEmail)
	Add user to board
boardContainsUser(boardName, userEmail)
	return true(1) if board contains user
boardRemoveUser(boardName, userEmail)
	Remove user from board and all of its cards
	
boardSelect(boardName)

// 	NOTE: To create/modify/delete a card, first you must select a board
cardCreate(cardName, cardDescription)
	Description is "" by default
cardModify(cardID)
cardDelete(cardID)
cardAssignUser(cardID, userEmail)
cardRemoveUser(cardID, userEmail)

cardGetStatus(cardID)
cardUpdate(cardID)
	if card.status != DONE
		if card.status == TODO
			card.status = WORKING
		else if card.status == WORKING
			card.status = DONE
cardSetStatus(cardID, status)
cardGetUserLog(cardID)
